#!/usr/bin/python3
# coding: UTF-8
#
# PAR Consortium
# Copyright (C) 2020
# All rights reserved.
#
# This code is distributed under the terms of the GNU General Public
# License, Version 3. See the text file "COPYING" for further details
# about the terms of this license.

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.par_identifier import ParIdentifier
from swagger_server.models.representation_format_signature import RepresentationFormatSignature
from swagger_server import util


class RepresentationFormat(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, has_priority_over: List[ParIdentifier]=None, id: ParIdentifier=None, local_last_modified_date: str=None, name: str=None, representation_format_signature: RepresentationFormatSignature=None):  # noqa: E501
        """RepresentationFormat - a model defined in Swagger

        :param description: The description of this RepresentationFormat.  # noqa: E501
        :type description: str
        :param has_priority_over: The has_priority_over of this RepresentationFormat.  # noqa: E501
        :type has_priority_over: List[ParIdentifier]
        :param id: The id of this RepresentationFormat.  # noqa: E501
        :type id: ParIdentifier
        :param local_last_modified_date: The local_last_modified_date of this RepresentationFormat.  # noqa: E501
        :type local_last_modified_date: str
        :param name: The name of this RepresentationFormat.  # noqa: E501
        :type name: str
        :param representation_format_signature: The representation_format_signature of this RepresentationFormat.  # noqa: E501
        :type representation_format_signature: RepresentationFormatSignature
        """
        self.swagger_types = {
            'description': str,
            'has_priority_over': List[ParIdentifier],
            'id': ParIdentifier,
            'local_last_modified_date': str,
            'name': str,
            'representation_format_signature': RepresentationFormatSignature
        }

        self.attribute_map = {
            'description': 'description',
            'has_priority_over': 'hasPriorityOver',
            'id': 'id',
            'local_last_modified_date': 'localLastModifiedDate',
            'name': 'name',
            'representation_format_signature': 'representationFormatSignature'
        }

        self._description = description
        self._has_priority_over = has_priority_over
        self._id = id
        self._local_last_modified_date = local_last_modified_date
        self._name = name
        self._representation_format_signature = representation_format_signature

    @classmethod
    def from_dict(cls, dikt) -> 'RepresentationFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RepresentationFormat of this RepresentationFormat.  # noqa: E501
        :rtype: RepresentationFormat
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this RepresentationFormat.


        :return: The description of this RepresentationFormat.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this RepresentationFormat.


        :param description: The description of this RepresentationFormat.
        :type description: str
        """

        self._description = description

    @property
    def has_priority_over(self) -> List[ParIdentifier]:
        """Gets the has_priority_over of this RepresentationFormat.


        :return: The has_priority_over of this RepresentationFormat.
        :rtype: List[ParIdentifier]
        """
        return self._has_priority_over

    @has_priority_over.setter
    def has_priority_over(self, has_priority_over: List[ParIdentifier]):
        """Sets the has_priority_over of this RepresentationFormat.


        :param has_priority_over: The has_priority_over of this RepresentationFormat.
        :type has_priority_over: List[ParIdentifier]
        """

        self._has_priority_over = has_priority_over

    @property
    def id(self) -> ParIdentifier:
        """Gets the id of this RepresentationFormat.


        :return: The id of this RepresentationFormat.
        :rtype: ParIdentifier
        """
        return self._id

    @id.setter
    def id(self, id: ParIdentifier):
        """Sets the id of this RepresentationFormat.


        :param id: The id of this RepresentationFormat.
        :type id: ParIdentifier
        """

        self._id = id

    @property
    def local_last_modified_date(self) -> str:
        """Gets the local_last_modified_date of this RepresentationFormat.


        :return: The local_last_modified_date of this RepresentationFormat.
        :rtype: str
        """
        return self._local_last_modified_date

    @local_last_modified_date.setter
    def local_last_modified_date(self, local_last_modified_date: str):
        """Sets the local_last_modified_date of this RepresentationFormat.


        :param local_last_modified_date: The local_last_modified_date of this RepresentationFormat.
        :type local_last_modified_date: str
        """

        self._local_last_modified_date = local_last_modified_date

    @property
    def name(self) -> str:
        """Gets the name of this RepresentationFormat.


        :return: The name of this RepresentationFormat.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this RepresentationFormat.


        :param name: The name of this RepresentationFormat.
        :type name: str
        """

        self._name = name

    @property
    def representation_format_signature(self) -> RepresentationFormatSignature:
        """Gets the representation_format_signature of this RepresentationFormat.


        :return: The representation_format_signature of this RepresentationFormat.
        :rtype: RepresentationFormatSignature
        """
        return self._representation_format_signature

    @representation_format_signature.setter
    def representation_format_signature(self, representation_format_signature: RepresentationFormatSignature):
        """Sets the representation_format_signature of this RepresentationFormat.


        :param representation_format_signature: The representation_format_signature of this RepresentationFormat.
        :type representation_format_signature: RepresentationFormatSignature
        """

        self._representation_format_signature = representation_format_signature
