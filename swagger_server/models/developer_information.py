#!/usr/bin/python3
# coding: UTF-8
#
# PAR Consortium
# Copyright (C) 2020
# All rights reserved.
#
# This code is distributed under the terms of the GNU General Public
# License, Version 3. See the text file "COPYING" for further details
# about the terms of this license.

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DeveloperInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, developer_compound_name: str=None, developer_id: str=None, developer_id_namespace: str=None, developer_name: str=None, organisation_name: str=None):  # noqa: E501
        """DeveloperInformation - a model defined in Swagger

        :param developer_compound_name: The developer_compound_name of this DeveloperInformation.  # noqa: E501
        :type developer_compound_name: str
        :param developer_id: The developer_id of this DeveloperInformation.  # noqa: E501
        :type developer_id: str
        :param developer_id_namespace: The developer_id_namespace of this DeveloperInformation.  # noqa: E501
        :type developer_id_namespace: str
        :param developer_name: The developer_name of this DeveloperInformation.  # noqa: E501
        :type developer_name: str
        :param organisation_name: The organisation_name of this DeveloperInformation.  # noqa: E501
        :type organisation_name: str
        """
        self.swagger_types = {
            'developer_compound_name': str,
            'developer_id': str,
            'developer_id_namespace': str,
            'developer_name': str,
            'organisation_name': str
        }

        self.attribute_map = {
            'developer_compound_name': 'developerCompoundName',
            'developer_id': 'developerId',
            'developer_id_namespace': 'developerIdNamespace',
            'developer_name': 'developerName',
            'organisation_name': 'organisationName'
        }

        self._developer_compound_name = developer_compound_name
        self._developer_id = developer_id
        self._developer_id_namespace = developer_id_namespace
        self._developer_name = developer_name
        self._organisation_name = organisation_name

    @classmethod
    def from_dict(cls, dikt) -> 'DeveloperInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeveloperInformation of this DeveloperInformation.  # noqa: E501
        :rtype: DeveloperInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def developer_compound_name(self) -> str:
        """Gets the developer_compound_name of this DeveloperInformation.


        :return: The developer_compound_name of this DeveloperInformation.
        :rtype: str
        """
        return self._developer_compound_name

    @developer_compound_name.setter
    def developer_compound_name(self, developer_compound_name: str):
        """Sets the developer_compound_name of this DeveloperInformation.


        :param developer_compound_name: The developer_compound_name of this DeveloperInformation.
        :type developer_compound_name: str
        """

        self._developer_compound_name = developer_compound_name

    @property
    def developer_id(self) -> str:
        """Gets the developer_id of this DeveloperInformation.


        :return: The developer_id of this DeveloperInformation.
        :rtype: str
        """
        return self._developer_id

    @developer_id.setter
    def developer_id(self, developer_id: str):
        """Sets the developer_id of this DeveloperInformation.


        :param developer_id: The developer_id of this DeveloperInformation.
        :type developer_id: str
        """

        self._developer_id = developer_id

    @property
    def developer_id_namespace(self) -> str:
        """Gets the developer_id_namespace of this DeveloperInformation.


        :return: The developer_id_namespace of this DeveloperInformation.
        :rtype: str
        """
        return self._developer_id_namespace

    @developer_id_namespace.setter
    def developer_id_namespace(self, developer_id_namespace: str):
        """Sets the developer_id_namespace of this DeveloperInformation.


        :param developer_id_namespace: The developer_id_namespace of this DeveloperInformation.
        :type developer_id_namespace: str
        """

        self._developer_id_namespace = developer_id_namespace

    @property
    def developer_name(self) -> str:
        """Gets the developer_name of this DeveloperInformation.


        :return: The developer_name of this DeveloperInformation.
        :rtype: str
        """
        return self._developer_name

    @developer_name.setter
    def developer_name(self, developer_name: str):
        """Sets the developer_name of this DeveloperInformation.


        :param developer_name: The developer_name of this DeveloperInformation.
        :type developer_name: str
        """

        self._developer_name = developer_name

    @property
    def organisation_name(self) -> str:
        """Gets the organisation_name of this DeveloperInformation.


        :return: The organisation_name of this DeveloperInformation.
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name: str):
        """Sets the organisation_name of this DeveloperInformation.


        :param organisation_name: The organisation_name of this DeveloperInformation.
        :type organisation_name: str
        """

        self._organisation_name = organisation_name
