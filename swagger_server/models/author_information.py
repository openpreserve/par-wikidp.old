# coding: utf-8

from __future__ import absolute_import

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AuthorInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, author_compound_name: str=None, author_id: str=None, author_id_namespace: str=None, author_name: str=None, organisation_name: str=None):  # noqa: E501
        """AuthorInformation - a model defined in Swagger

        :param author_compound_name: The author_compound_name of this AuthorInformation.  # noqa: E501
        :type author_compound_name: str
        :param author_id: The author_id of this AuthorInformation.  # noqa: E501
        :type author_id: str
        :param author_id_namespace: The author_id_namespace of this AuthorInformation.  # noqa: E501
        :type author_id_namespace: str
        :param author_name: The author_name of this AuthorInformation.  # noqa: E501
        :type author_name: str
        :param organisation_name: The organisation_name of this AuthorInformation.  # noqa: E501
        :type organisation_name: str
        """
        self.swagger_types = {
            'author_compound_name': str,
            'author_id': str,
            'author_id_namespace': str,
            'author_name': str,
            'organisation_name': str
        }

        self.attribute_map = {
            'author_compound_name': 'authorCompoundName',
            'author_id': 'authorId',
            'author_id_namespace': 'authorIdNamespace',
            'author_name': 'authorName',
            'organisation_name': 'organisationName'
        }

        self._author_compound_name = author_compound_name
        self._author_id = author_id
        self._author_id_namespace = author_id_namespace
        self._author_name = author_name
        self._organisation_name = organisation_name

    @classmethod
    def from_dict(cls, dikt) -> 'AuthorInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuthorInformation of this AuthorInformation.  # noqa: E501
        :rtype: AuthorInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_compound_name(self) -> str:
        """Gets the author_compound_name of this AuthorInformation.


        :return: The author_compound_name of this AuthorInformation.
        :rtype: str
        """
        return self._author_compound_name

    @author_compound_name.setter
    def author_compound_name(self, author_compound_name: str):
        """Sets the author_compound_name of this AuthorInformation.


        :param author_compound_name: The author_compound_name of this AuthorInformation.
        :type author_compound_name: str
        """

        self._author_compound_name = author_compound_name

    @property
    def author_id(self) -> str:
        """Gets the author_id of this AuthorInformation.


        :return: The author_id of this AuthorInformation.
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id: str):
        """Sets the author_id of this AuthorInformation.


        :param author_id: The author_id of this AuthorInformation.
        :type author_id: str
        """

        self._author_id = author_id

    @property
    def author_id_namespace(self) -> str:
        """Gets the author_id_namespace of this AuthorInformation.


        :return: The author_id_namespace of this AuthorInformation.
        :rtype: str
        """
        return self._author_id_namespace

    @author_id_namespace.setter
    def author_id_namespace(self, author_id_namespace: str):
        """Sets the author_id_namespace of this AuthorInformation.


        :param author_id_namespace: The author_id_namespace of this AuthorInformation.
        :type author_id_namespace: str
        """

        self._author_id_namespace = author_id_namespace

    @property
    def author_name(self) -> str:
        """Gets the author_name of this AuthorInformation.


        :return: The author_name of this AuthorInformation.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name: str):
        """Sets the author_name of this AuthorInformation.


        :param author_name: The author_name of this AuthorInformation.
        :type author_name: str
        """

        self._author_name = author_name

    @property
    def organisation_name(self) -> str:
        """Gets the organisation_name of this AuthorInformation.


        :return: The organisation_name of this AuthorInformation.
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name: str):
        """Sets the organisation_name of this AuthorInformation.


        :param organisation_name: The organisation_name of this AuthorInformation.
        :type organisation_name: str
        """

        self._organisation_name = organisation_name
