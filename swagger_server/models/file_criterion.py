#!/usr/bin/python3
# coding: UTF-8
#
# PAR Consortium
# Copyright (C) 2020
# All rights reserved.
#
# This code is distributed under the terms of the GNU General Public
# License, Version 3. See the text file "COPYING" for further details
# about the terms of this license.

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.par_identifier import ParIdentifier
from swagger_server import util


class FileCriterion(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, formats: List[ParIdentifier]=None, format_families: List[ParIdentifier]=None, minimum: str=None, maximum: str=None):  # noqa: E501
        """FileCriterion - a model defined in Swagger

        :param formats: The formats of this FileCriterion.  # noqa: E501
        :type formats: List[ParIdentifier]
        :param format_families: The format_families of this FileCriterion.  # noqa: E501
        :type format_families: List[ParIdentifier]
        :param minimum: The minimum of this FileCriterion.  # noqa: E501
        :type minimum: str
        :param maximum: The maximum of this FileCriterion.  # noqa: E501
        :type maximum: str
        """
        self.swagger_types = {
            'formats': List[ParIdentifier],
            'format_families': List[ParIdentifier],
            'minimum': str,
            'maximum': str
        }

        self.attribute_map = {
            'formats': 'formats',
            'format_families': 'formatFamilies',
            'minimum': 'minimum',
            'maximum': 'maximum'
        }

        self._formats = formats
        self._format_families = format_families
        self._minimum = minimum
        self._maximum = maximum

    @classmethod
    def from_dict(cls, dikt) -> 'FileCriterion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FileCriterion of this FileCriterion.  # noqa: E501
        :rtype: FileCriterion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def formats(self) -> List[ParIdentifier]:
        """Gets the formats of this FileCriterion.


        :return: The formats of this FileCriterion.
        :rtype: List[ParIdentifier]
        """
        return self._formats

    @formats.setter
    def formats(self, formats: List[ParIdentifier]):
        """Sets the formats of this FileCriterion.


        :param formats: The formats of this FileCriterion.
        :type formats: List[ParIdentifier]
        """

        self._formats = formats

    @property
    def format_families(self) -> List[ParIdentifier]:
        """Gets the format_families of this FileCriterion.


        :return: The format_families of this FileCriterion.
        :rtype: List[ParIdentifier]
        """
        return self._format_families

    @format_families.setter
    def format_families(self, format_families: List[ParIdentifier]):
        """Sets the format_families of this FileCriterion.


        :param format_families: The format_families of this FileCriterion.
        :type format_families: List[ParIdentifier]
        """

        self._format_families = format_families

    @property
    def minimum(self) -> str:
        """Gets the minimum of this FileCriterion.

        (representing a number)  # noqa: E501

        :return: The minimum of this FileCriterion.
        :rtype: str
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum: str):
        """Sets the minimum of this FileCriterion.

        (representing a number)  # noqa: E501

        :param minimum: The minimum of this FileCriterion.
        :type minimum: str
        """

        self._minimum = minimum

    @property
    def maximum(self) -> str:
        """Gets the maximum of this FileCriterion.

        (representing a number or \"unbounded\")  # noqa: E501

        :return: The maximum of this FileCriterion.
        :rtype: str
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum: str):
        """Sets the maximum of this FileCriterion.

        (representing a number or \"unbounded\")  # noqa: E501

        :param maximum: The maximum of this FileCriterion.
        :type maximum: str
        """

        self._maximum = maximum
