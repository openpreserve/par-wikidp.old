#!/usr/bin/python3
# coding: UTF-8
#
# PAR Consortium
# Copyright (C) 2020
# All rights reserved.
#
# This code is distributed under the terms of the GNU General Public
# License, Version 3. See the text file "COPYING" for further details
# about the terms of this license.

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ByteSequenceInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, byte_sequence_id: str=None, byte_sequence_id_namespace: str=None, byte_sequence_value: str=None, endianness: str=None, indirect_offset_length: str=None, indirect_offset_location: str=None, max_offset: str=None, offset: str=None, position_type: str=None):  # noqa: E501
        """ByteSequenceInformation - a model defined in Swagger

        :param byte_sequence_id: The byte_sequence_id of this ByteSequenceInformation.  # noqa: E501
        :type byte_sequence_id: str
        :param byte_sequence_id_namespace: The byte_sequence_id_namespace of this ByteSequenceInformation.  # noqa: E501
        :type byte_sequence_id_namespace: str
        :param byte_sequence_value: The byte_sequence_value of this ByteSequenceInformation.  # noqa: E501
        :type byte_sequence_value: str
        :param endianness: The endianness of this ByteSequenceInformation.  # noqa: E501
        :type endianness: str
        :param indirect_offset_length: The indirect_offset_length of this ByteSequenceInformation.  # noqa: E501
        :type indirect_offset_length: str
        :param indirect_offset_location: The indirect_offset_location of this ByteSequenceInformation.  # noqa: E501
        :type indirect_offset_location: str
        :param max_offset: The max_offset of this ByteSequenceInformation.  # noqa: E501
        :type max_offset: str
        :param offset: The offset of this ByteSequenceInformation.  # noqa: E501
        :type offset: str
        :param position_type: The position_type of this ByteSequenceInformation.  # noqa: E501
        :type position_type: str
        """
        self.swagger_types = {
            'byte_sequence_id': str,
            'byte_sequence_id_namespace': str,
            'byte_sequence_value': str,
            'endianness': str,
            'indirect_offset_length': str,
            'indirect_offset_location': str,
            'max_offset': str,
            'offset': str,
            'position_type': str
        }

        self.attribute_map = {
            'byte_sequence_id': 'byteSequenceId',
            'byte_sequence_id_namespace': 'byteSequenceIdNamespace',
            'byte_sequence_value': 'byteSequenceValue',
            'endianness': 'endianness',
            'indirect_offset_length': 'indirectOffsetLength',
            'indirect_offset_location': 'indirectOffsetLocation',
            'max_offset': 'maxOffset',
            'offset': 'offset',
            'position_type': 'positionType'
        }

        self._byte_sequence_id = byte_sequence_id
        self._byte_sequence_id_namespace = byte_sequence_id_namespace
        self._byte_sequence_value = byte_sequence_value
        self._endianness = endianness
        self._indirect_offset_length = indirect_offset_length
        self._indirect_offset_location = indirect_offset_location
        self._max_offset = max_offset
        self._offset = offset
        self._position_type = position_type

    @classmethod
    def from_dict(cls, dikt) -> 'ByteSequenceInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ByteSequenceInformation of this ByteSequenceInformation.  # noqa: E501
        :rtype: ByteSequenceInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def byte_sequence_id(self) -> str:
        """Gets the byte_sequence_id of this ByteSequenceInformation.


        :return: The byte_sequence_id of this ByteSequenceInformation.
        :rtype: str
        """
        return self._byte_sequence_id

    @byte_sequence_id.setter
    def byte_sequence_id(self, byte_sequence_id: str):
        """Sets the byte_sequence_id of this ByteSequenceInformation.


        :param byte_sequence_id: The byte_sequence_id of this ByteSequenceInformation.
        :type byte_sequence_id: str
        """

        self._byte_sequence_id = byte_sequence_id

    @property
    def byte_sequence_id_namespace(self) -> str:
        """Gets the byte_sequence_id_namespace of this ByteSequenceInformation.


        :return: The byte_sequence_id_namespace of this ByteSequenceInformation.
        :rtype: str
        """
        return self._byte_sequence_id_namespace

    @byte_sequence_id_namespace.setter
    def byte_sequence_id_namespace(self, byte_sequence_id_namespace: str):
        """Sets the byte_sequence_id_namespace of this ByteSequenceInformation.


        :param byte_sequence_id_namespace: The byte_sequence_id_namespace of this ByteSequenceInformation.
        :type byte_sequence_id_namespace: str
        """

        self._byte_sequence_id_namespace = byte_sequence_id_namespace

    @property
    def byte_sequence_value(self) -> str:
        """Gets the byte_sequence_value of this ByteSequenceInformation.


        :return: The byte_sequence_value of this ByteSequenceInformation.
        :rtype: str
        """
        return self._byte_sequence_value

    @byte_sequence_value.setter
    def byte_sequence_value(self, byte_sequence_value: str):
        """Sets the byte_sequence_value of this ByteSequenceInformation.


        :param byte_sequence_value: The byte_sequence_value of this ByteSequenceInformation.
        :type byte_sequence_value: str
        """

        self._byte_sequence_value = byte_sequence_value

    @property
    def endianness(self) -> str:
        """Gets the endianness of this ByteSequenceInformation.


        :return: The endianness of this ByteSequenceInformation.
        :rtype: str
        """
        return self._endianness

    @endianness.setter
    def endianness(self, endianness: str):
        """Sets the endianness of this ByteSequenceInformation.


        :param endianness: The endianness of this ByteSequenceInformation.
        :type endianness: str
        """

        self._endianness = endianness

    @property
    def indirect_offset_length(self) -> str:
        """Gets the indirect_offset_length of this ByteSequenceInformation.


        :return: The indirect_offset_length of this ByteSequenceInformation.
        :rtype: str
        """
        return self._indirect_offset_length

    @indirect_offset_length.setter
    def indirect_offset_length(self, indirect_offset_length: str):
        """Sets the indirect_offset_length of this ByteSequenceInformation.


        :param indirect_offset_length: The indirect_offset_length of this ByteSequenceInformation.
        :type indirect_offset_length: str
        """

        self._indirect_offset_length = indirect_offset_length

    @property
    def indirect_offset_location(self) -> str:
        """Gets the indirect_offset_location of this ByteSequenceInformation.


        :return: The indirect_offset_location of this ByteSequenceInformation.
        :rtype: str
        """
        return self._indirect_offset_location

    @indirect_offset_location.setter
    def indirect_offset_location(self, indirect_offset_location: str):
        """Sets the indirect_offset_location of this ByteSequenceInformation.


        :param indirect_offset_location: The indirect_offset_location of this ByteSequenceInformation.
        :type indirect_offset_location: str
        """

        self._indirect_offset_location = indirect_offset_location

    @property
    def max_offset(self) -> str:
        """Gets the max_offset of this ByteSequenceInformation.


        :return: The max_offset of this ByteSequenceInformation.
        :rtype: str
        """
        return self._max_offset

    @max_offset.setter
    def max_offset(self, max_offset: str):
        """Sets the max_offset of this ByteSequenceInformation.


        :param max_offset: The max_offset of this ByteSequenceInformation.
        :type max_offset: str
        """

        self._max_offset = max_offset

    @property
    def offset(self) -> str:
        """Gets the offset of this ByteSequenceInformation.


        :return: The offset of this ByteSequenceInformation.
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset: str):
        """Sets the offset of this ByteSequenceInformation.


        :param offset: The offset of this ByteSequenceInformation.
        :type offset: str
        """

        self._offset = offset

    @property
    def position_type(self) -> str:
        """Gets the position_type of this ByteSequenceInformation.


        :return: The position_type of this ByteSequenceInformation.
        :rtype: str
        """
        return self._position_type

    @position_type.setter
    def position_type(self, position_type: str):
        """Sets the position_type of this ByteSequenceInformation.


        :param position_type: The position_type of this ByteSequenceInformation.
        :type position_type: str
        """

        self._position_type = position_type
