#!/usr/bin/python3
# coding: UTF-8
#
# PAR Consortium
# Copyright (C) 2020
# All rights reserved.
#
# This code is distributed under the terms of the GNU General Public
# License, Version 3. See the text file "COPYING" for further details
# about the terms of this license.

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PublisherInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, organisation_name: str=None, publisher_compound_name: str=None, publisher_id: str=None, publisher_id_namespace: str=None, publisher_name: str=None):  # noqa: E501
        """PublisherInformation - a model defined in Swagger

        :param organisation_name: The organisation_name of this PublisherInformation.  # noqa: E501
        :type organisation_name: str
        :param publisher_compound_name: The publisher_compound_name of this PublisherInformation.  # noqa: E501
        :type publisher_compound_name: str
        :param publisher_id: The publisher_id of this PublisherInformation.  # noqa: E501
        :type publisher_id: str
        :param publisher_id_namespace: The publisher_id_namespace of this PublisherInformation.  # noqa: E501
        :type publisher_id_namespace: str
        :param publisher_name: The publisher_name of this PublisherInformation.  # noqa: E501
        :type publisher_name: str
        """
        self.swagger_types = {
            'organisation_name': str,
            'publisher_compound_name': str,
            'publisher_id': str,
            'publisher_id_namespace': str,
            'publisher_name': str
        }

        self.attribute_map = {
            'organisation_name': 'organisationName',
            'publisher_compound_name': 'publisherCompoundName',
            'publisher_id': 'publisherId',
            'publisher_id_namespace': 'publisherIdNamespace',
            'publisher_name': 'publisherName'
        }

        self._organisation_name = organisation_name
        self._publisher_compound_name = publisher_compound_name
        self._publisher_id = publisher_id
        self._publisher_id_namespace = publisher_id_namespace
        self._publisher_name = publisher_name

    @classmethod
    def from_dict(cls, dikt) -> 'PublisherInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PublisherInformation of this PublisherInformation.  # noqa: E501
        :rtype: PublisherInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organisation_name(self) -> str:
        """Gets the organisation_name of this PublisherInformation.


        :return: The organisation_name of this PublisherInformation.
        :rtype: str
        """
        return self._organisation_name

    @organisation_name.setter
    def organisation_name(self, organisation_name: str):
        """Sets the organisation_name of this PublisherInformation.


        :param organisation_name: The organisation_name of this PublisherInformation.
        :type organisation_name: str
        """

        self._organisation_name = organisation_name

    @property
    def publisher_compound_name(self) -> str:
        """Gets the publisher_compound_name of this PublisherInformation.


        :return: The publisher_compound_name of this PublisherInformation.
        :rtype: str
        """
        return self._publisher_compound_name

    @publisher_compound_name.setter
    def publisher_compound_name(self, publisher_compound_name: str):
        """Sets the publisher_compound_name of this PublisherInformation.


        :param publisher_compound_name: The publisher_compound_name of this PublisherInformation.
        :type publisher_compound_name: str
        """

        self._publisher_compound_name = publisher_compound_name

    @property
    def publisher_id(self) -> str:
        """Gets the publisher_id of this PublisherInformation.


        :return: The publisher_id of this PublisherInformation.
        :rtype: str
        """
        return self._publisher_id

    @publisher_id.setter
    def publisher_id(self, publisher_id: str):
        """Sets the publisher_id of this PublisherInformation.


        :param publisher_id: The publisher_id of this PublisherInformation.
        :type publisher_id: str
        """

        self._publisher_id = publisher_id

    @property
    def publisher_id_namespace(self) -> str:
        """Gets the publisher_id_namespace of this PublisherInformation.


        :return: The publisher_id_namespace of this PublisherInformation.
        :rtype: str
        """
        return self._publisher_id_namespace

    @publisher_id_namespace.setter
    def publisher_id_namespace(self, publisher_id_namespace: str):
        """Sets the publisher_id_namespace of this PublisherInformation.


        :param publisher_id_namespace: The publisher_id_namespace of this PublisherInformation.
        :type publisher_id_namespace: str
        """

        self._publisher_id_namespace = publisher_id_namespace

    @property
    def publisher_name(self) -> str:
        """Gets the publisher_name of this PublisherInformation.


        :return: The publisher_name of this PublisherInformation.
        :rtype: str
        """
        return self._publisher_name

    @publisher_name.setter
    def publisher_name(self, publisher_name: str):
        """Sets the publisher_name of this PublisherInformation.


        :param publisher_name: The publisher_name of this PublisherInformation.
        :type publisher_name: str
        """

        self._publisher_name = publisher_name
