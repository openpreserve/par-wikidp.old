#!/usr/bin/python3
# coding: UTF-8
#
# PAR Consortium
# Copyright (C) 2020
# All rights reserved.
#
# This code is distributed under the terms of the GNU General Public
# License, Version 3. See the text file "COPYING" for further details
# about the terms of this license.


from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.par_identifier import ParIdentifier
from swagger_server import util


class ParProperty(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, _class: str=None, description: str=None, equivalent_to: List[str]=None, id: ParIdentifier=None, local_last_modified_date: str=None, type: str=None, units: str=None, value: str=None):  # noqa: E501
        """ParProperty - a model defined in Swagger

        :param _class: The _class of this ParProperty.  # noqa: E501
        :type _class: str
        :param description: The description of this ParProperty.  # noqa: E501
        :type description: str
        :param equivalent_to: The equivalent_to of this ParProperty.  # noqa: E501
        :type equivalent_to: List[str]
        :param id: The id of this ParProperty.  # noqa: E501
        :type id: ParIdentifier
        :param local_last_modified_date: The local_last_modified_date of this ParProperty.  # noqa: E501
        :type local_last_modified_date: str
        :param type: The type of this ParProperty.  # noqa: E501
        :type type: str
        :param units: The units of this ParProperty.  # noqa: E501
        :type units: str
        :param value: The value of this ParProperty.  # noqa: E501
        :type value: str
        """
        self.swagger_types = {
            '_class': str,
            'description': str,
            'equivalent_to': List[str],
            'id': ParIdentifier,
            'local_last_modified_date': str,
            'type': str,
            'units': str,
            'value': str
        }

        self.attribute_map = {
            '_class': 'class',
            'description': 'description',
            'equivalent_to': 'equivalentTo',
            'id': 'id',
            'local_last_modified_date': 'localLastModifiedDate',
            'type': 'type',
            'units': 'units',
            'value': 'value'
        }

        self.__class = _class
        self._description = description
        self._equivalent_to = equivalent_to
        self._id = id
        self._local_last_modified_date = local_last_modified_date
        self._type = type
        self._units = units
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'ParProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ParProperty of this ParProperty.  # noqa: E501
        :rtype: ParProperty
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self) -> str:
        """Gets the _class of this ParProperty.


        :return: The _class of this ParProperty.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class: str):
        """Sets the _class of this ParProperty.


        :param _class: The _class of this ParProperty.
        :type _class: str
        """

        self.__class = _class

    @property
    def description(self) -> str:
        """Gets the description of this ParProperty.


        :return: The description of this ParProperty.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ParProperty.


        :param description: The description of this ParProperty.
        :type description: str
        """

        self._description = description

    @property
    def equivalent_to(self) -> List[str]:
        """Gets the equivalent_to of this ParProperty.


        :return: The equivalent_to of this ParProperty.
        :rtype: List[str]
        """
        return self._equivalent_to

    @equivalent_to.setter
    def equivalent_to(self, equivalent_to: List[str]):
        """Sets the equivalent_to of this ParProperty.


        :param equivalent_to: The equivalent_to of this ParProperty.
        :type equivalent_to: List[str]
        """

        self._equivalent_to = equivalent_to

    @property
    def id(self) -> ParIdentifier:
        """Gets the id of this ParProperty.


        :return: The id of this ParProperty.
        :rtype: ParIdentifier
        """
        return self._id

    @id.setter
    def id(self, id: ParIdentifier):
        """Sets the id of this ParProperty.


        :param id: The id of this ParProperty.
        :type id: ParIdentifier
        """

        self._id = id

    @property
    def local_last_modified_date(self) -> str:
        """Gets the local_last_modified_date of this ParProperty.


        :return: The local_last_modified_date of this ParProperty.
        :rtype: str
        """
        return self._local_last_modified_date

    @local_last_modified_date.setter
    def local_last_modified_date(self, local_last_modified_date: str):
        """Sets the local_last_modified_date of this ParProperty.


        :param local_last_modified_date: The local_last_modified_date of this ParProperty.
        :type local_last_modified_date: str
        """

        self._local_last_modified_date = local_last_modified_date

    @property
    def type(self) -> str:
        """Gets the type of this ParProperty.


        :return: The type of this ParProperty.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ParProperty.


        :param type: The type of this ParProperty.
        :type type: str
        """

        self._type = type

    @property
    def units(self) -> str:
        """Gets the units of this ParProperty.


        :return: The units of this ParProperty.
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units: str):
        """Sets the units of this ParProperty.


        :param units: The units of this ParProperty.
        :type units: str
        """

        self._units = units

    @property
    def value(self) -> str:
        """Gets the value of this ParProperty.


        :return: The value of this ParProperty.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this ParProperty.


        :param value: The value of this ParProperty.
        :type value: str
        """

        self._value = value
