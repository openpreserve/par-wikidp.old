#!/usr/bin/python3
# coding: UTF-8
#
# PAR Consortium
# Copyright (C) 2020
# All rights reserved.
#
# This code is distributed under the terms of the GNU General Public
# License, Version 3. See the text file "COPYING" for further details
# about the terms of this license.


from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.action import Action
from swagger_server.models.par_identifier import ParIdentifier
from swagger_server.models.preservation_action_type import PreservationActionType
from swagger_server import util


class BusinessRule(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, format_families: List[ParIdentifier]=None, formats: List[ParIdentifier]=None, id: ParIdentifier=None, local_last_modified_date: str=None, notes: str=None, preservation_action_types: List[PreservationActionType]=None, preservation_actions: List[Action]=None):  # noqa: E501
        """BusinessRule - a model defined in Swagger

        :param description: The description of this BusinessRule.  # noqa: E501
        :type description: str
        :param format_families: The format_families of this BusinessRule.  # noqa: E501
        :type format_families: List[ParIdentifier]
        :param formats: The formats of this BusinessRule.  # noqa: E501
        :type formats: List[ParIdentifier]
        :param id: The id of this BusinessRule.  # noqa: E501
        :type id: ParIdentifier
        :param local_last_modified_date: The local_last_modified_date of this BusinessRule.  # noqa: E501
        :type local_last_modified_date: str
        :param notes: The notes of this BusinessRule.  # noqa: E501
        :type notes: str
        :param preservation_action_types: The preservation_action_types of this BusinessRule.  # noqa: E501
        :type preservation_action_types: List[PreservationActionType]
        :param preservation_actions: The preservation_actions of this BusinessRule.  # noqa: E501
        :type preservation_actions: List[Action]
        """
        self.swagger_types = {
            'description': str,
            'format_families': List[ParIdentifier],
            'formats': List[ParIdentifier],
            'id': ParIdentifier,
            'local_last_modified_date': str,
            'notes': str,
            'preservation_action_types': List[PreservationActionType],
            'preservation_actions': List[Action]
        }

        self.attribute_map = {
            'description': 'description',
            'format_families': 'formatFamilies',
            'formats': 'formats',
            'id': 'id',
            'local_last_modified_date': 'localLastModifiedDate',
            'notes': 'notes',
            'preservation_action_types': 'preservationActionTypes',
            'preservation_actions': 'preservationActions'
        }

        self._description = description
        self._format_families = format_families
        self._formats = formats
        self._id = id
        self._local_last_modified_date = local_last_modified_date
        self._notes = notes
        self._preservation_action_types = preservation_action_types
        self._preservation_actions = preservation_actions

    @classmethod
    def from_dict(cls, dikt) -> 'BusinessRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BusinessRule of this BusinessRule.  # noqa: E501
        :rtype: BusinessRule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this BusinessRule.


        :return: The description of this BusinessRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this BusinessRule.


        :param description: The description of this BusinessRule.
        :type description: str
        """

        self._description = description

    @property
    def format_families(self) -> List[ParIdentifier]:
        """Gets the format_families of this BusinessRule.


        :return: The format_families of this BusinessRule.
        :rtype: List[ParIdentifier]
        """
        return self._format_families

    @format_families.setter
    def format_families(self, format_families: List[ParIdentifier]):
        """Sets the format_families of this BusinessRule.


        :param format_families: The format_families of this BusinessRule.
        :type format_families: List[ParIdentifier]
        """

        self._format_families = format_families

    @property
    def formats(self) -> List[ParIdentifier]:
        """Gets the formats of this BusinessRule.


        :return: The formats of this BusinessRule.
        :rtype: List[ParIdentifier]
        """
        return self._formats

    @formats.setter
    def formats(self, formats: List[ParIdentifier]):
        """Sets the formats of this BusinessRule.


        :param formats: The formats of this BusinessRule.
        :type formats: List[ParIdentifier]
        """

        self._formats = formats

    @property
    def id(self) -> ParIdentifier:
        """Gets the id of this BusinessRule.


        :return: The id of this BusinessRule.
        :rtype: ParIdentifier
        """
        return self._id

    @id.setter
    def id(self, id: ParIdentifier):
        """Sets the id of this BusinessRule.


        :param id: The id of this BusinessRule.
        :type id: ParIdentifier
        """

        self._id = id

    @property
    def local_last_modified_date(self) -> str:
        """Gets the local_last_modified_date of this BusinessRule.


        :return: The local_last_modified_date of this BusinessRule.
        :rtype: str
        """
        return self._local_last_modified_date

    @local_last_modified_date.setter
    def local_last_modified_date(self, local_last_modified_date: str):
        """Sets the local_last_modified_date of this BusinessRule.


        :param local_last_modified_date: The local_last_modified_date of this BusinessRule.
        :type local_last_modified_date: str
        """

        self._local_last_modified_date = local_last_modified_date

    @property
    def notes(self) -> str:
        """Gets the notes of this BusinessRule.


        :return: The notes of this BusinessRule.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this BusinessRule.


        :param notes: The notes of this BusinessRule.
        :type notes: str
        """

        self._notes = notes

    @property
    def preservation_action_types(self) -> List[PreservationActionType]:
        """Gets the preservation_action_types of this BusinessRule.


        :return: The preservation_action_types of this BusinessRule.
        :rtype: List[PreservationActionType]
        """
        return self._preservation_action_types

    @preservation_action_types.setter
    def preservation_action_types(self, preservation_action_types: List[PreservationActionType]):
        """Sets the preservation_action_types of this BusinessRule.


        :param preservation_action_types: The preservation_action_types of this BusinessRule.
        :type preservation_action_types: List[PreservationActionType]
        """

        self._preservation_action_types = preservation_action_types

    @property
    def preservation_actions(self) -> List[Action]:
        """Gets the preservation_actions of this BusinessRule.


        :return: The preservation_actions of this BusinessRule.
        :rtype: List[Action]
        """
        return self._preservation_actions

    @preservation_actions.setter
    def preservation_actions(self, preservation_actions: List[Action]):
        """Sets the preservation_actions of this BusinessRule.


        :param preservation_actions: The preservation_actions of this BusinessRule.
        :type preservation_actions: List[Action]
        """

        self._preservation_actions = preservation_actions
